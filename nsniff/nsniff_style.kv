#:import math math
#:import NoTransition kivy.uix.screenmanager.NoTransition

<MainView>:
    orientation: 'vertical'
    spacing: '5dp'
    canvas:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            pos: self.pos
            size: self.size
    StackLayout:
        size_hint_y: None
        height: '44dp'
        orientation: 'lr-tb'
        padding: '10dp', '5dp'
        spacing: '5dp'
        canvas:
            Color:
                rgba: app.theme.primary
            Rectangle:
                pos: self.pos
                size: self.size
        AccentThemedButton:
            disabled: bool(app.filename)
            text: 'Add device'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_release: app.add_device()
        FlatDivider:
            color: app.theme.divider
        FlatImageButton:
            disabled: bool(app.filename)
            scale_down_color: True
            source: 'flat_save.png'
            flat_color: app.theme.accent
            hover_text: "Log to file"
            on_release: app.open_filechooser(callback=app.save_file_callback, mode='save', target=app.last_directory, title='Log to csv file', filters=['*.csv', '*.*'])
        FlatImageButton:
            disabled: not app.filename
            scale_down_color: True
            source: 'flat_stop.png'
            flat_color: app.theme.accent
            on_release: app.close_file()
            hover_text: 'Stop logging'
        FlatDivider:
            color: app.theme.divider
        FlatLabel:
            text: str(error_indicator.count)
            size_hint_x: None
            width: self.texture_size[0]
            padding: '1dp', '5dp'
            flat_color: app.theme.text_primary
        FlatErrorIndicatorPopup:
            id: error_indicator
            scale_down_color: True
            source: 'flat_alert.png'
            flat_color: app.theme.accent
            on_kv_post: app.error_indicator = self
            on_release: self.count = 0
        FlatDivider:
            color: app.theme.divider
        FlatSizedTextInput:
            disabled: not app.filename
            id: event_name
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '100dp'
            hint_text: 'event name'
        AccentThemedButton:
            disabled: not app.filename
            text: 'Add event'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_release: app.log_event(event_name.text)
            canvas:
                Color:
                    rgba: 1, .47, .39, (1 if app.global_focus else 0)
                Line:
                    width: 1
                    points: [self.x, self.y, self.right, self.y, self.right, self.top, self.x, self.top, self.x, self.y]
    ScrollView:
        bar_width: '15dp'
        scroll_type: ['bars']
        do_scroll_x: False
        always_overscroll: False
        BoxLayout:
            id: dev_container
            orientation: 'vertical'
            spacing: '10dp'
            size_hint_y: None
            height: len(self.children) * self.parent.height
            canvas:
                Color:
                    rgba: app.theme.primary
                Rectangle:
                    pos: self.pos
                    size: self.size


<DeviceDisplay>:
    orientation: 'vertical'
    spacing: '5dp'
    padding: '20dp', '5dp'
    canvas:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        size_hint_y: None
        height: '34dp'
        spacing: '5dp'
        size_hint_min_x: self.minimum_width
        AccentThemedToggleButton:
            text: 'Virtual device'
            state: 'down' if root.virtual else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.virtual = self.state == 'down'
        FlatSizedTextInput:
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '100dp'
            text: root.com_port
            on_text: root.com_port = self.text
            hint_text: 'port'
        FlatImageToggleButton:
            source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
            flat_color: app.theme.accent
            on_release: root.start() if self.state == 'down' else root.stop()
            hover_text: '[b]start[/b] sensor' if self.state == 'normal' else '[b]stop[/b] sensor'
        Widget
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'ID: {}'.format(root.device.device_id) if root.device is not None else 'ID: none'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Temp: {:0.1f}'.format(root.device.temp) if root.device is not None else 'Temp: 0'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Humidity: {:0.1f}'.format(root.device.humidity) if root.device is not None else 'Tumidity: 0'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Clock: {:0.1f}'.format(root.t)
        FlatImageButton:
            disabled: bool(app.filename)
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            hover_text: 'Delete device'
            on_release: app.remove_device(root.__self__)
    BoxLayout:
        size_hint_y: None
        height: '34dp'
        spacing: '5dp'
        size_hint_min_x: self.minimum_width
        AccentThemedToggleButton:
            text: 'logarithmic'
            state: 'down' if root.log_z else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.log_z = self.state == 'down'
        AccentThemedToggleButton:
            text: 'Auto range'
            state: 'down' if root.auto_range else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.auto_range = self.state == 'down'
        AccentThemedToggleButton:
            text: 'Global range'
            state: 'down' if root.global_range else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.global_range = self.state == 'down'
        Widget
        AccentThemedToggleButton:
            id: plot_3d_button
            text: '3D'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            state: 'down'
            on_state:
                plot_2d_button.state = 'normal' if self.state == 'down' else 'down'
                manager.current = '3d' if self.state == 'down' else '2d'
        AccentThemedToggleButton:
            id: plot_2d_button
            text: '2D'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: plot_3d_button.state = 'normal' if self.state == 'down' else 'down'
        Widget
        AccentThemedButton:
            channel_selection: channel_selection.__self__
            text: 'Channels'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_release: channel_selection.open(self)
            ChannelSelection:
                id: channel_selection
                on_kv_post:
                    root.add_channel_selection(self)
                    self.parent.remove_widget(self)
                BoxLayout:
                    spacing: '10dp'
                    size_hint: None, None
                    size: self.minimum_size
                    padding: '10dp'
                    AccentThemedButton:
                        size_hint: None, None
                        size: self.texture_size
                        padding: '10dp', '10dp'
                        on_state: for widget in root.channels_stats: widget.ids.state.state = 'down'
                        text: 'Show all'
                    AccentThemedButton:
                        size_hint: None, None
                        size: self.texture_size
                        padding: '10dp', '10dp'
                        on_state: for widget in root.channels_stats: widget.ids.state.state = 'normal'
                        text: 'Hide all'
        FlatSizedTextInput:
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '80dp'
            on_focus: if not self.focus: root.t_start = float(self.text) if self.text else None
            hint_text: 'start time'
            input_filter: 'float'
        FlatSizedTextInput:
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '80dp'
            on_focus: if not self.focus: root.t_last = float(self.text) if self.text else None
            hint_text: 'n end sec'
            input_filter: 'float'
        FlatSizedTextInput:
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '80dp'
            on_focus: if not self.focus: root.t_end = float(self.text) if self.text else None
            hint_text: 'end time'
            input_filter: 'float'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Range channel:'
            bold: True
        ThemedSpinner:
            id: range_chan
            values: ['all', 'mouse'] + [str(i + 1) for i in range(root.n_channels)]
            text: root.range_chan
            on_text: root.range_chan = self.text
            size_hint_min_y: self.minimum_height
            size_hint_x: None
            width: '100dp'
    Widget:
        size_hint_y: None
        height: '20dp'
        canvas:
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                pos: self.pos
                size: self.size
                texture: root.scale_tex
    ScreenManager:
        id: manager
        size_hint_min: '114dp', '114dp'
        on_kv_post: root.create_plot(plot_3d.__self__, plot_2d.__self__)
        transition: NoTransition()
        Screen:
            name: '3d'
            SniffGraph:
                id: plot_3d
                dev_display: root.__self__
                visible: manager.current == '3d'
                is_3d: True
                xlabel: 'Time (s)'
                ylabel: 'Sensor ID'
                x_ticks_minor: 5
                x_ticks_major: max(round((self.xmax - self.xmin) / max(self.width / dp(200), 1)), 0)
                y_ticks_major: 10
                y_grid_label: True
                x_grid_label: True
                padding: 5
                ymin: 1
                ymax: 33
                tick_color: app.theme.accent[:3]
                border_color: app.theme.accent[:3]
                label_options: {'color': app.theme.text_primary[:3], 'bold': True}
                background_color: app.theme.primary_text
        Screen:
            name: '2d'
            SniffGraph:
                id: plot_2d
                dev_display: root.__self__
                visible: manager.current == '2d'
                is_3d: False
                xlabel: 'Time (s)'
                ylabel: 'Normalized value'
                x_ticks_minor: 5
                x_ticks_major: max(round((self.xmax - self.xmin) / max(self.width / dp(200), 1)), 0)
                y_ticks_major: (self.ymax - self.ymin) / max(self.height / dp(200), 1)
                y_ticks_minor: 2 if root.log_z else 0
                y_grid_label: True
                x_grid_label: True
                padding: 5
                ymin: .1 if root.log_z else 0
                ymax: 1
                ylog: root.log_z
                tick_color: app.theme.accent[:3]
                border_color: app.theme.accent[:3]
                label_options: {'color': app.theme.text_primary[:3], 'bold': True}
                background_color: app.theme.primary_text


<ChannelControl@BoxLayout>:
    dev: None
    channel: 0
    min_val: 0
    max_val: 0
    channel: 0
    spacing: '10dp'
    size_hint: None, None
    size: self.minimum_size
    padding: '10dp', 0
    plot_color: 1, 1, 1
    Widget:
        size_hint_x: None
        width: '40dp'
        canvas:
            Color:
                rgb: root.plot_color or (1, 1, 1)
            Rectangle:
                size: self.size
                pos: self.pos
    AccentThemedToggleButton:
        id: state
        size_hint: None, None
        size: self.texture_size
        padding: '40dp', '10dp'
        state: 'down'
        on_state: root.dev.show_hide_channel(root.channel, self.state == 'down')
        text: str(root.channel + 1)
    ThemedLabel:
        size_hint_x: None
        width: self.texture_size[0]
        text: 'range: {:0.1f} - {:0.1f}'.format(root.min_val, root.max_val)
    FlatSizedTextInput:
        background_color: app.theme.primary_text
        size_hint_x: None
        width: '70dp'
        on_focus: if not self.focus and self.text: root.dev.set_channel_min_val(root.channel, self.text)
        hint_text: 'min'
        input_filter: 'float'
    ThemedLabel:
        size_hint_x: None
        width: self.texture_size[0]
        text: ' - '
    FlatSizedTextInput:
        background_color: app.theme.primary_text
        size_hint_x: None
        width: '70dp'
        on_focus: if not self.focus and self.text: root.dev.set_channel_max_val(root.channel, self.text)
        hint_text: 'max'
        input_filter: 'float'


<ChannelSelection@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, True


<GraphPosLabel@ThemedSizedLabel>:
    padding: '10dp', '10dp'
    canvas.before:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            size: self.size
            pos: self.pos
