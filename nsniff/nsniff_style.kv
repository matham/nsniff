#:import math math
#:import NoTransition kivy.uix.screenmanager.NoTransition

<MainView>:
    orientation: 'vertical'
    spacing: '5dp'
    canvas:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        size_hint_y: None
        height: '44dp'
        padding: '10dp', '5dp'
        spacing: '5dp'
        canvas:
            Color:
                rgba: app.theme.primary
            Rectangle:
                pos: self.pos
                size: self.size
        FlatImageButton:
            disabled: bool(app.filename) or app.stage.playing
            scale_down_color: True
            source: 'flat_save.png'
            flat_color: app.theme.accent
            hover_text: "Log to file"
            on_release: app.open_filechooser(callback=app.save_file_callback, mode='save', target=app.last_directory, title='Log to H5 file', filters=['*.h5', '*.*'])
        FlatImageButton:
            disabled: not app.filename or app.stage.playing
            scale_down_color: True
            source: 'flat_stop.png'
            flat_color: app.theme.accent
            on_release: app.close_file()
            hover_text: 'Stop logging'
        FlatDivider:
            color: app.theme.divider
        FlatImageButton:
            disabled: app.stage.playing
            scale_down_color: True
            source: 'flat_upload.png'
            flat_color: app.theme.accent
            hover_text: "Load protocol"
            on_release: app.open_filechooser(callback=app.stage.load_protocol, target=app.stage.last_directory, title='Load protocol', filters=['*.csv', '*.*'])
        FlatSizedTextInput:
            id: stage_key_text
            disabled: app.stage.playing or stage_key.state == 'normal'
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '60dp'
            hint_text: 'key'
            canvas.after:
                Color:
                    rgba: 1, .47, .39, (1 if app.global_focus and not self.disabled else 0)
                Line:
                    width: 1
                    points: [self.x, self.y, self.right, self.y, self.right, self.top, self.x, self.top, self.x, self.y]
        FlatImageToggleButton:
            id: play_stage
            disabled: not app.stage.filename
            source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
            flat_color: app.theme.accent
            on_release: app.stage.start(stage_key_text.text, alarm.state == 'down') if self.state == 'down' else app.stage.stop()
            hover_text: '[b]start[/b] stages' if self.state == 'normal' else '[b]stop[/b] stages'
            state: 'down' if app.stage.playing else 'normal'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: '{} / {} ({}/{})'.format(app.stage.stage_remaining_time, app.stage.remaining_time, app.stage.stage_i, app.stage.n_stages)
        FlatImageButton:
            protocol_settings: protocol_settings.__self__
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release: self.protocol_settings.open(self)
            FlatDropDown:
                flat_color: app.theme.primary_text
                flat_border_color: app.theme.divider
                do_scroll: False, True
                id: protocol_settings
                on_kv_post: self.parent.remove_widget(self)
                GridLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: '10dp', '5dp'
                    size_hint_min_x: self.minimum_width
                    cols: 2
                    ThemedLabel:
                        size_hint: None, None
                        size: self.texture_size[0], '24dp'
                        text: 'End alarm:'
                    AccentThemedToggleButton:
                        id: alarm
                        disabled: app.stage.playing
                        text: 'true' if self.state == 'down' else 'false'
                        size_hint_min_x: self.texture_size[0]
                        padding_x: '10dp'
                    ThemedLabel:
                        size_hint: None, None
                        size: self.texture_size[0], '24dp'
                        text: 'Key start:'
                    AccentThemedToggleButton:
                        id: stage_key
                        disabled: app.stage.playing
                        text: 'true' if self.state == 'down' else 'false'
                        size_hint_min_x: self.texture_size[0]
                        padding_x: '10dp'
        FlatDivider:
            color: app.theme.divider
        FlatLabel:
            text: str(error_indicator.count)
            size_hint_x: None
            width: self.texture_size[0]
            padding: '1dp', '5dp'
            flat_color: app.theme.text_primary
        FlatErrorIndicatorPopup:
            id: error_indicator
            scale_down_color: True
            source: 'flat_alert.png'
            flat_color: app.theme.accent
            on_kv_post: app.error_indicator = self
            on_release: self.count = 0
        FlatImageButton:
            app_settings: app_settings.__self__
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release: self.app_settings.open(self)
            FlatDropDown:
                flat_color: app.theme.primary_text
                flat_border_color: app.theme.divider
                do_scroll: False, True
                id: app_settings
                on_kv_post: self.parent.remove_widget(self)
                GridLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: '10dp', '5dp'
                    size_hint_min_x: self.minimum_width
                    cols: 2
                    ThemedLabel:
                        size_hint: None, None
                        size: self.texture_size[0], '24dp'
                        text: 'File compression:'
                    ThemedSpinner:
                        values: ['Auto', 'ZIP', 'None']
                        text: app.compression
                        on_text: app.compression = self.text
                        size_hint_x: None
                        width: self.minimum_width
                    ThemedLabel:
                        size_hint: None, None
                        size: self.texture_size[0], '24dp'
                        text: 'Num sensors:'
                    FlatSizedTextInput:
                        background_color: app.theme.primary_text
                        size_hint_x: None
                        width: '50dp'
                        text: str(app.n_sensors)
                        on_focus: if not self.focus: app.n_sensors = int(self.text or 0)
                        input_filter: 'int'
                    ThemedLabel:
                        size_hint: None, None
                        size: self.texture_size[0], '24dp'
                        text: 'Channel height:'
                    FlatSizedTextInput:
                        background_color: app.theme.primary_text
                        size_hint_x: None
                        width: '50dp'
                        text: str(app.pixel_height)
                        on_focus: if not self.focus: app.pixel_height = int(self.text or 0)
                        input_filter: 'int'
                    ThemedLabel:
                        size_hint: None, None
                        size: self.texture_size[0], '24dp'
                        text: 'Num valve boards:'
                    FlatSizedTextInput:
                        background_color: app.theme.primary_text
                        size_hint_x: None
                        width: '50dp'
                        text: str(app.n_valve_boards)
                        on_focus: if not self.focus: app.n_valve_boards = int(self.text or 0)
                        input_filter: 'int'
                    ThemedLabel:
                        size_hint: None, None
                        size: self.texture_size[0], '24dp'
                        text: 'Num MFCs:'
                    FlatSizedTextInput:
                        background_color: app.theme.primary_text
                        size_hint_x: None
                        width: '50dp'
                        text: str(app.n_mfc)
                        on_focus: if not self.focus: app.n_mfc = int(self.text or 0)
                        input_filter: 'int'
        FlatDivider:
            color: app.theme.divider
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Prediction: {}'.format(app.model.class_pred)
    ScrollView:
        bar_width: '15dp'
        scroll_type: ['bars']
        do_scroll_x: False
        always_overscroll: False
        BoxLayout:
            orientation: 'vertical'
            spacing: '10dp'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            canvas:
                Color:
                    rgba: app.theme.primary
                Rectangle:
                    pos: self.pos
                    size: self.size
            BoxLayout:
                spacing: '10dp'
                size_hint_y: None
                height: '34dp'
                BoxLayout:
                    on_kv_post: app._valve_container = self.__self__
                    spacing: '10dp'
                    size_hint_min_x: self.minimum_width
                FlatDivider:
                    size_hint_y: None
                    height: '24dp'
                    color: app.theme.divider
                BoxLayout:
                    on_kv_post: app._mfc_container = self.__self__
                    spacing: '10dp'
                    size_hint_min_x: self.minimum_width
            BoxLayout:
                on_kv_post: app._dev_container = self.__self__
                orientation: 'vertical'
                spacing: '10dp'
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width


<DeviceDisplay>:
    orientation: 'vertical'
    spacing: '5dp'
    padding: '20dp', '5dp'
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    canvas:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        size_hint_y: None
        height: '34dp'
        spacing: '5dp'
        size_hint_min_x: self.minimum_width
        FlatImageToggleButton:
            id: play
            source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
            flat_color: app.theme.accent
            on_release: root.start() if self.state == 'down' else root.stop()
            hover_text: '[b]start[/b] sensor' if self.state == 'normal' else '[b]stop[/b] sensor'
        AccentThemedToggleButton:
            text: 'logarithmic'
            state: 'down' if root.log_z else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.log_z = self.state == 'down'
        AccentThemedToggleButton:
            text: 'Auto range'
            state: 'down' if root.auto_range else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.auto_range = self.state == 'down'
        AccentThemedToggleButton:
            text: 'Global range'
            state: 'down' if root.global_range else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.global_range = self.state == 'down'
        Widget
        AccentThemedToggleButton:
            id: plot_3d_button
            text: '3D'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            state: 'down'
            on_state:
                plot_2d_button.state = 'normal' if self.state == 'down' else 'down'
                manager.current = '3d' if self.state == 'down' else '2d'
        AccentThemedToggleButton:
            id: plot_2d_button
            text: '2D'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: plot_3d_button.state = 'normal' if self.state == 'down' else 'down'
        Widget
        FlatImageButton:
            dev_settings: dev_settings.__self__
            scale_down_color: True
            source: 'flat_dots_vertical.png'
            flat_color: app.theme.accent
            on_release: self.dev_settings.open(self)
            FlatDropDown:
                flat_color: app.theme.primary_text
                flat_border_color: app.theme.divider
                do_scroll: False, True
                id: dev_settings
                on_kv_post: self.parent.remove_widget(self)
                BoxLayout:
                    spacing: '5dp'
                    size_hint: None, None
                    size: self.minimum_size
                    orientation: 'vertical'
                    BoxLayout:
                        size_hint: None, None
                        size: self.minimum_width, '24dp'
                        spacing: '5dp'
                        ThemedLabel:
                            size_hint_x: None
                            width: self.texture_size[0]
                            text: 'ID: {}'.format(root.device.device_id) if root.device is not None else 'ID: none'
                        ThemedLabel:
                            size_hint_x: None
                            width: self.texture_size[0]
                            text: 'Temp: {:0.1f}'.format(root.device.temp) if root.device is not None else 'Temp: 0'
                        ThemedLabel:
                            size_hint_x: None
                            width: self.texture_size[0]
                            text: 'Humidity: {:0.1f}'.format(root.device.humidity) if root.device is not None else 'Humidity: 0'
                        ThemedLabel:
                            size_hint_x: None
                            width: self.texture_size[0]
                            text: 'Clock: {:0.1f}'.format(root.t)
                    GridLayout:
                        size_hint_y: None
                        height: self.minimum_height
                        spacing: '10dp', '5dp'
                        size_hint_min_x: self.minimum_width
                        cols: 2
                        ThemedLabel:
                            size_hint: None, None
                            size: self.texture_size[0], '24dp'
                            text: 'Device:'
                        AccentThemedToggleButton:
                            disabled: root.is_running
                            text: 'Virtual device'
                            state: 'down' if root.virtual else 'normal'
                            size_hint_min_x: self.texture_size[0]
                            padding_x: '10dp'
                            on_state: root.virtual = self.state == 'down'
                            hover_text: 'Device is virtual/real'
                        ThemedLabel:
                            size_hint: None, None
                            size: self.texture_size[0], '24dp'
                            text: 'COM port:'
                        FlatSizedTextInput:
                            disabled: root.is_running
                            background_color: app.theme.primary_text
                            size_hint_min_x: '100dp'
                            text: root.com_port
                            on_text: root.com_port = self.text
                            hint_text: 'port'
                        ThemedLabel:
                            size_hint: None, None
                            size: self.texture_size[0], '24dp'
                            text: 'Remote server:'
                        FlatSizedTextInput:
                            disabled: root.is_running
                            background_color: app.theme.primary_text
                            size_hint_min_x: '100dp'
                            text: root.remote_server
                            on_text: root.remote_server = self.text
                            hint_text: 'host name'
                        ThemedLabel:
                            size_hint: None, None
                            size: self.texture_size[0], '24dp'
                            text: 'Remote port:'
                        FlatSizedTextInput:
                            disabled: root.is_running
                            background_color: app.theme.primary_text
                            size_hint_min_x: '100dp'
                            text: str(root.remote_port)
                            on_text: root.remote_port = int(self.text or 0)
                            hint_text: 'port number'
                            input_filter: 'int'
                        ThemedLabel:
                            size_hint: None, None
                            size: self.texture_size[0], '24dp'
                            text: 'Device ID:'
                        FlatSizedTextInput:
                            disabled: root.is_running
                            background_color: app.theme.primary_text
                            size_hint_min_x: '100dp'
                            text: root.unique_dev_id
                            on_text: root.unique_dev_id = self.text
                            hint_text: 'unique ID'
                        ThemedLabel:
                            size_hint: None, None
                            size: self.texture_size[0], '24dp'
                            text: 'Select Channels:'
                        AccentThemedButton:
                            channel_selection: channel_selection.__self__
                            text: 'Channels'
                            size_hint_x: None
                            width: self.texture_size[0]
                            on_release: self.channel_selection.open(self)
                            hover_text: 'Select displayed channels'
                            ChannelSelection:
                                id: channel_selection
                                on_kv_post:
                                    root.add_channel_selection(self)
                                    self.parent.remove_widget(self)
                                BoxLayout:
                                    spacing: '10dp'
                                    size_hint: None, None
                                    size: self.minimum_size
                                    padding: '10dp'
                                    AccentThemedButton:
                                        size_hint: None, None
                                        size: self.texture_size
                                        padding: '10dp', '10dp'
                                        on_state: for widget in root.channels_stats: widget.ids.state.state = 'down'
                                        text: 'Show all'
                                    AccentThemedButton:
                                        size_hint: None, None
                                        size: self.texture_size
                                        padding: '10dp', '10dp'
                                        on_state: for widget in root.channels_stats: widget.ids.state.state = 'normal'
                                        text: 'Hide all'
                        ThemedLabel:
                            size_hint: None, None
                            size: self.texture_size[0], '24dp'
                            text: 'Displayed range:'
                        BoxLayout:
                            size_hint_min_x: self.minimum_width
                            spacing: '5dp'
                            FlatSizedTextInput:
                                background_color: app.theme.primary_text
                                size_hint_min_x: '80dp'
                                on_focus: if not self.focus: root.t_start = float(self.text) if self.text else None
                                hint_text: 'start time'
                                input_filter: 'float'
                            FlatSizedTextInput:
                                background_color: app.theme.primary_text
                                size_hint_min_x: '80dp'
                                on_focus: if not self.focus: root.t_last = float(self.text) if self.text else None
                                hint_text: 'n end sec'
                                input_filter: 'float'
                            FlatSizedTextInput:
                                background_color: app.theme.primary_text
                                size_hint_min_x: '80dp'
                                on_focus: if not self.focus: root.t_end = float(self.text) if self.text else None
                                hint_text: 'end time'
                                input_filter: 'float'
                        ThemedLabel:
                            size_hint_x: None
                            width: self.texture_size[0]
                            text: 'Range channel:'
                        ThemedSpinner:
                            id: range_chan
                            values: ['all', 'mouse'] + [str(i + 1) for i in range(root.n_channels)]
                            text: root.range_chan
                            on_text: root.range_chan = self.text
                            size_hint_min_y: self.minimum_height
                            size_hint_x: None
                            width: '100dp'
    Widget:
        size_hint_y: None
        height: '20dp'
        canvas:
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                pos: self.pos
                size: self.size
                texture: root.scale_tex
    ScreenManager:
        id: manager
        size_hint_min_x: '114dp'
        size_hint_y: None
        height: dp(114) + 32 * app.pixel_height
        on_kv_post: root.create_plot(plot_3d.__self__, plot_2d.__self__)
        transition: NoTransition()
        Screen:
            name: '3d'
            SniffGraph:
                id: plot_3d
                dev_display: root.__self__
                visible: manager.current == '3d'
                is_3d: True
                xlabel: 'Time (s)'
                ylabel: 'Sensor ID'
                x_ticks_minor: 5
                x_ticks_major: max(round((self.xmax - self.xmin) / max(self.width / dp(200), 1)), 0)
                y_ticks_major: 10
                y_grid_label: True
                x_grid_label: True
                padding: 5
                ymin: 1
                ymax: 33
                tick_color: app.theme.accent[:3]
                border_color: app.theme.accent[:3]
                label_options: {'color': app.theme.text_primary[:3], 'bold': True}
                background_color: app.theme.primary_text
        Screen:
            name: '2d'
            SniffGraph:
                id: plot_2d
                dev_display: root.__self__
                visible: manager.current == '2d'
                is_3d: False
                xlabel: 'Time (s)'
                ylabel: 'Normalized value'
                x_ticks_minor: 5
                x_ticks_major: max(round((self.xmax - self.xmin) / max(self.width / dp(200), 1)), 0)
                y_ticks_major: (self.ymax - self.ymin) / max(self.height / dp(200), 1)
                y_ticks_minor: 2 if root.log_z else 0
                y_grid_label: True
                x_grid_label: True
                padding: 5
                ymin: .1 if root.log_z else 0
                ymax: 1
                ylog: root.log_z
                tick_color: app.theme.accent[:3]
                border_color: app.theme.accent[:3]
                label_options: {'color': app.theme.text_primary[:3], 'bold': True}
                background_color: app.theme.primary_text


<ChannelControl@BoxLayout>:
    dev: None
    channel: 0
    min_val: 0
    max_val: 0
    channel: 0
    spacing: '10dp'
    size_hint: None, None
    size: self.minimum_size
    padding: '10dp', 0
    plot_color: 1, 1, 1
    Widget:
        size_hint_x: None
        width: '40dp'
        canvas:
            Color:
                rgb: root.plot_color or (1, 1, 1)
            Rectangle:
                size: self.size
                pos: self.pos
    AccentThemedToggleButton:
        id: state
        size_hint: None, None
        size: self.texture_size
        padding: '40dp', '10dp'
        state: 'down'
        on_state: root.dev.show_hide_channel(root.channel, self.state == 'down')
        text: str(root.channel + 1)
    ThemedLabel:
        size_hint_x: None
        width: self.texture_size[0]
        text: 'range: {:0.1f} - {:0.1f}'.format(root.min_val, root.max_val)
    FlatSizedTextInput:
        background_color: app.theme.primary_text
        size_hint_x: None
        width: '70dp'
        on_focus: if not self.focus and self.text: root.dev.set_channel_min_val(root.channel, self.text)
        hint_text: 'min'
        input_filter: 'float'
    ThemedLabel:
        size_hint_x: None
        width: self.texture_size[0]
        text: ' - '
    FlatSizedTextInput:
        background_color: app.theme.primary_text
        size_hint_x: None
        width: '70dp'
        on_focus: if not self.focus and self.text: root.dev.set_channel_max_val(root.channel, self.text)
        hint_text: 'max'
        input_filter: 'float'


<ChannelSelection@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, True


<GraphPosLabel@ThemedSizedLabel>:
    padding: '10dp', '10dp'
    canvas.before:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            size: self.size
            pos: self.pos


<ValveBoardWidget>:
    spacing: '7dp'
    size_hint: None, None
    size: self.minimum_width, '25dp'
    on_data_update:
        relay_0.state = 'down' if self.device.relay_0 else 'normal'
        relay_1.state = 'down' if self.device.relay_1 else 'normal'
        relay_2.state = 'down' if self.device.relay_2 else 'normal'
        relay_3.state = 'down' if self.device.relay_3 else 'normal'
    FlatImageToggleButton:
        id: play
        disabled: app.stage.playing
        source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
        flat_color: app.theme.accent
        on_release: root.start() if self.state == 'down' else root.stop()
        hover_text: '[b]start[/b] valves' if self.state == 'normal' else '[b]stop[/b] valves'
    BoxLayout:
        disabled: not root.is_running
        spacing: '3dp'
        size_hint_x: None
        width: self.minimum_width
        FlatImageToggleButton:
            id: relay_0
            source: 'radiobox-blank.png' if self.state == 'normal' else 'radiobox-marked.png'
            flat_color: app.theme.accent
            on_release: root.set_valves(relay_0=self.state == 'down')
        FlatImageToggleButton:
            id: relay_1
            source: 'radiobox-blank.png' if self.state == 'normal' else 'radiobox-marked.png'
            flat_color: app.theme.accent
            on_release: root.set_valves(relay_1=self.state == 'down')
        FlatImageToggleButton:
            id: relay_2
            source: 'radiobox-blank.png' if self.state == 'normal' else 'radiobox-marked.png'
            flat_color: app.theme.accent
            on_release: root.set_valves(relay_2=self.state == 'down')
        FlatImageToggleButton:
            id: relay_3
            source: 'radiobox-blank.png' if self.state == 'normal' else 'radiobox-marked.png'
            flat_color: app.theme.accent
            on_release: root.set_valves(relay_3=self.state == 'down')
    FlatImageButton:
        board_settings: board_settings.__self__
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release: self.board_settings.open(self)
        FlatDropDown:
            flat_color: app.theme.primary_text
            flat_border_color: app.theme.divider
            do_scroll: False, True
            id: board_settings
            on_kv_post: self.parent.remove_widget(self)
            GridLayout:
                disabled: root.is_running
                size_hint_y: None
                height: self.minimum_height
                spacing: '10dp', '5dp'
                size_hint_min_x: self.minimum_width
                cols: 2
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Device:'
                AccentThemedToggleButton:
                    text: 'Virtual device'
                    state: 'down' if root.virtual else 'normal'
                    size_hint_min_x: self.texture_size[0]
                    padding_x: '10dp'
                    on_state: root.virtual = self.state == 'down'
                    hover_text: 'Device is virtual/real'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'COM port:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: root.com_port
                    on_text: root.com_port = self.text
                    hint_text: 'port'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Device address:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: str(root.dev_address)
                    on_text: root.dev_address = int(self.text or 0)
                    hint_text: 'address'
                    input_filter: 'int'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Remote server:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: root.remote_server
                    on_text: root.remote_server = self.text
                    hint_text: 'host name'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Remote port:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: str(root.remote_port)
                    on_text: root.remote_port = int(self.text or 0)
                    hint_text: 'port number'
                    input_filter: 'int'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Device ID:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: root.unique_dev_id
                    on_text: root.unique_dev_id = self.text
                    hint_text: 'unique ID'


<MFCWidget>:
    spacing: '7dp'
    size_hint: None, None
    size: self.minimum_width, '25dp'
    on_data_update:
        if not state.focus: state.text = '{:0.4f}'.format(self.device.state)
    FlatImageToggleButton:
        id: play
        disabled: app.stage.playing
        source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
        flat_color: app.theme.accent
        on_release: root.start() if self.state == 'down' else root.stop()
        hover_text: '[b]start[/b] valves' if self.state == 'normal' else '[b]stop[/b] valves'
    FlatSizedTextInput:
        id: state
        disabled: not root.is_running
        background_color: app.theme.primary_text
        size_hint_min_x: '60dp'
        input_filter: 'float'
        on_text_validate: root.set_value(float(self.text or 0))
    FlatImageButton:
        board_settings: board_settings.__self__
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release: self.board_settings.open(self)
        FlatDropDown:
            flat_color: app.theme.primary_text
            flat_border_color: app.theme.divider
            do_scroll: False, True
            id: board_settings
            on_kv_post: self.parent.remove_widget(self)
            GridLayout:
                disabled: root.is_running
                size_hint_y: None
                height: self.minimum_height
                spacing: '10dp', '5dp'
                size_hint_min_x: self.minimum_width
                cols: 2
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Device:'
                AccentThemedToggleButton:
                    text: 'Virtual device'
                    state: 'down' if root.virtual else 'normal'
                    size_hint_min_x: self.texture_size[0]
                    padding_x: '10dp'
                    on_state: root.virtual = self.state == 'down'
                    hover_text: 'Device is virtual/real'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Device address:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: str(root.dev_address)
                    on_text: root.dev_address = int(self.text or 0)
                    hint_text: 'address'
                    input_filter: 'int'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'COM port:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: root.com_port
                    on_text: root.com_port = self.text
                    hint_text: 'port'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Remote server:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: root.remote_server
                    on_text: root.remote_server = self.text
                    hint_text: 'host name'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Remote port:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: str(root.remote_port)
                    on_text: root.remote_port = int(self.text or 0)
                    hint_text: 'port number'
                    input_filter: 'int'
                ThemedLabel:
                    size_hint: None, None
                    size: self.texture_size[0], '24dp'
                    text: 'Device ID:'
                FlatSizedTextInput:
                    background_color: app.theme.primary_text
                    size_hint_min_x: '100dp'
                    text: root.unique_dev_id
                    on_text: root.unique_dev_id = self.text
                    hint_text: 'unique ID'
