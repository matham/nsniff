#:import math math

<MainView@BoxLayout>:
    orientation: 'vertical'
    spacing: '5dp'
    canvas:
        Color:
            rgba: app.theme.primary_text
        Rectangle:
            pos: self.pos
            size: self.size
    StackLayout:
        size_hint_y: None
        height: '34dp'
        orientation: 'lr-tb'
        padding: '10dp', 0
        canvas:
            Color:
                rgba: app.theme.primary
            Rectangle:
                pos: self.pos
                size: self.size
        FlatDivider:
            color: app.theme.divider
        FlatLabel:
            text: str(error_indicator.count)
            size_hint_x: None
            width: self.texture_size[0]
            padding: '1dp', '5dp'
            flat_color: app.theme.text_primary
        FlatErrorIndicatorPopup:
            id: error_indicator
            scale_down_color: True
            source: 'flat_alert.png'
            flat_color: app.theme.accent
            on_kv_post: app.error_indicator = self
            on_release: self.count = 0
    BoxLayout:
        orientation: 'horizontal'
        DeviceDisplay


<DeviceDisplay>:
    orientation: 'vertical'
    on_kv_post: app.device = self.__self__
    spacing: '5dp'
    padding: '10dp', 0
    BoxLayout:
        size_hint_y: None
        height: '34dp'
        spacing: '5dp'
        AccentThemedToggleButton:
            text: 'Virtual device'
            state: 'down' if root.virtual else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.virtual = self.state == 'down'
        FlatSizedTextInput:
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '100dp'
            text: root.com_port
            on_text: root.com_port = self.text
            hint_text: 'port'
        FlatImageToggleButton:
            source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
            flat_color: app.theme.accent
            on_release: root.start() if self.state == 'down' else root.stop()
            hover_text: '[b]start[/b] sensor' if self.state == 'normal' else '[b]stop[/b] sensor'
        Widget
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'ID: {}'.format(root.device.device_id) if root.device is not None else 'ID: none'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Temp: {:0.1f}'.format(root.device.temp) if root.device is not None else 'Temp: 0'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Humidity: {:0.1f}'.format(root.device.humidity) if root.device is not None else 'Tumidity: 0'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Clock: {:0.1f}'.format(root.t)
    BoxLayout:
        size_hint_y: None
        height: '34dp'
        spacing: '5dp'
        AccentThemedToggleButton:
            text: 'logarithmic'
            state: 'down' if root.log_z else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.log_z = self.state == 'down'
        AccentThemedToggleButton:
            text: 'Auto range'
            state: 'down' if root.auto_range else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.auto_range = self.state == 'down'
        AccentThemedToggleButton:
            text: 'Global range'
            state: 'down' if root.global_range else 'normal'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_state: root.global_range = self.state == 'down'
        Widget
        AccentThemedButton:
            channel_selection: channel_selection.__self__
            text: 'Channels'
            size_hint_x: None
            width: self.texture_size[0]
            padding_x: '10dp'
            on_release: channel_selection.open(self)
            ChannelSelection:
                id: channel_selection
                on_kv_post:
                    root.add_channel_selection(self)
                    self.parent.remove_widget(self)
        FlatSizedTextInput:
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '100dp'
            on_focus: if not self.focus: root.t_start = float(self.text or 0)
            hint_text: 'start t'
            input_filter: 'float'
        FlatSizedTextInput:
            background_color: app.theme.primary_text
            size_hint_x: None
            width: '100dp'
            on_focus: if not self.focus: root.t_end = float(self.text or 0)
            hint_text: 'end t'
            input_filter: 'float'
        ThemedLabel:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Range channel:'
            bold: True
        ThemedSpinner:
            id: range_chan
            values: ['all', 'mouse'] + [str(i + 1) for i in range(32)]
            text: root.range_chan
            on_text: root.range_chan = self.text
            size_hint_min_y: self.minimum_height
            size_hint_x: None
            width: '100dp'
    Widget:
        size_hint_y: None
        height: '20dp'
        canvas:
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                pos: self.pos
                size: self.size
                texture: root.scale_tex
    ScrollView:
        bar_width: '20'
        scroll_type: ['bars']
        SniffGraph:
            on_kv_post: root.create_plot(self.__self__)
            dev_display: root.__self__
            size_hint: None, None
            width: max(self.parent.width, dp(50 + root.num_points))
            height: max(self.parent.height, dp(50 + 64))
            xlabel: 'Time (s)'
            ylabel: 'Sensor ID'
            x_ticks_minor: 5
            x_ticks_major: round((self.xmax - self.xmin) / max(self.width / dp(200), 1))
            y_ticks_major: 10
            y_grid_label: True
            x_grid_label: True
            padding: 5
            ymin: 1
            ymax: 33
            xmin: min(root.t_start or 0, root.t_end or root.t)
            xmax: max(root.t_end or root.t, root.t_start or 0)
            tick_color: app.theme.accent[:3]
            border_color: app.theme.accent[:3]
            label_options: {'color': app.theme.text_primary[:3], 'bold': True}
            background_color: app.theme.primary_text


<ChannelActiveButton@AccentThemedToggleButton>:
    dev: None
    channel: 0
    size_hint: None, None
    size: self.texture_size
    padding: '40dp', '10dp'
    state: 'down'
    on_state: self.dev.active_channels[self.channel] = self.state == 'down'


<ChannelSelection@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, True
